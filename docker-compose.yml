# =============================================================================
# POCKET POS - Docker Compose Configuration
# =============================================================================
# Main Docker Compose file for Pocket POS application
# Orchestrates all services: API, Web Client, Mobile App, Database, Cache, Message Queue

# =============================================================================
# SERVICES CONFIGURATION
# =============================================================================
services:

  # ---------------------------------------------------------------------------
  # DATABASE SERVICES
  # ---------------------------------------------------------------------------
  
  # PostgreSQL Database
  postgres:
    image: postgres:17.6-alpine3.21
    container_name: zakpos-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-zakpos_dev}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_MULTIPLE_DATABASES:-zakpos_dev,zakpos_test,zakpos_prod}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init-auth.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    ports:
      - "47821:5432"
    networks:
      - zakpos-backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-zakpos_dev}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: [
      "postgres"
    ]
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis Cache
  redis:
    image: redis:7.4.4-alpine3.21
    container_name: zakpos-redis
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-58392}:6379"
    networks:
      - zakpos-backend
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis123}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: ["redis-server", "/etc/redis/redis.conf", "--requirepass", "${REDIS_PASSWORD:-redis123}", "--appendonly", "yes"]
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # ---------------------------------------------------------------------------
  # MESSAGE QUEUE SERVICES
  # ---------------------------------------------------------------------------

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zakpos-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_MAX_CLIENT_CNXNS: 60
      ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT: 3
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: 24
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    ports:
      - "${ZOOKEEPER_PORT:-55374}:2181"
    networks:
      - zakpos-backend
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Apache Kafka
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: zakpos-kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:54629
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:54629
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      # Fix for broker registration issues
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_NUM_NETWORK_THREADS: 3
      KAFKA_NUM_IO_THREADS: 8
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
    volumes:
      - kafka_data:/var/lib/kafka/data
      - ./docker/kafka/server.properties:/etc/kafka/server.properties:ro
    ports:
      - "${KAFKA_PORT:-54629}:9092"
      - "${KAFKA_INTERNAL_PORT:-56485}:29092"
    networks:
      - zakpos-backend
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:29092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # ---------------------------------------------------------------------------
  # APPLICATION SERVICES
  # ---------------------------------------------------------------------------

  # NestJS API Server
  api:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: ${API_BUILD_TARGET:-development}
      args:
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
        VERSION: ${VERSION}
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${API_PORT:-3000}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/${POSTGRES_DB:-zakpos_dev}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      API_PREFIX: ${API_PREFIX:-api/v1}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:41923,http://localhost:96140}
      RATE_LIMIT_TTL: ${RATE_LIMIT_TTL:-60}
      RATE_LIMIT_LIMIT: ${RATE_LIMIT_LIMIT:-100}
      FILE_UPLOAD_DEST: ${FILE_UPLOAD_DEST:-./uploads}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-your-email@gmail.com}
      SMTP_PASS: ${SMTP_PASS:-your-app-password}
      SENTRY_DSN: ${SENTRY_DSN}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - api_uploads:/app/uploads
      - api_logs:/app/logs
    ports:
      - "${API_PORT:-39847}:3000"
    networks:
      - zakpos-frontend
      - zakpos-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # NextJS Web Client
  web:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: ${WEB_BUILD_TARGET:-runtime}
      args:
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
        VERSION: ${VERSION}
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:39847/api/v1}
        NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:39847}
        NEXT_PUBLIC_APP_ENV: ${NEXT_PUBLIC_APP_ENV:-development}
        NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN}
        NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${NEXT_PUBLIC_GOOGLE_ANALYTICS_ID}
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${WEB_PORT:-3000}
      NEXT_TELEMETRY_DISABLED: 1
    volumes:
      - web_logs:/app/logs
    ports:
      - "${WEB_PORT:-41923}:3000"
    networks:
      - zakpos-frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # OCR Server (Image Processing)
  ocr:
    build:
      context: ./services/ocr
      dockerfile: Dockerfile
      target: ${OCR_BUILD_TARGET:-runtime}
      args:
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
        VERSION: ${VERSION}
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${OCR_PORT:-8000}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/${POSTGRES_DB:-zakpos_dev}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      KAFKA_BROKERS: kafka:29092
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      OCR_MODEL_PRIMARY: ${OCR_MODEL_PRIMARY:-microsoft/trocr-small-printed}
      OCR_MODEL_FALLBACK: ${OCR_MODEL_FALLBACK:-tesseract}
      OCR_ENABLE_GPU: ${OCR_ENABLE_GPU:-false}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      CORS_ORIGINS: ${CORS_ORIGIN:-http://localhost:41923,http://localhost:96140}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - ocr_logs:/app/logs
      - ocr_temp:/tmp
    ports:
      - "${OCR_PORT:-58000}:8000"
    networks:
      - zakpos-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 1G
          cpus: '0.5'

  # ---------------------------------------------------------------------------
  # REVERSE PROXY & LOAD BALANCER
  # ---------------------------------------------------------------------------

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.27-alpine3.21
    container_name: zakpos-nginx
    restart: unless-stopped
    depends_on:
      - api
      - web
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "${NGINX_HTTP_PORT:-58071}:80"
      - "${NGINX_HTTPS_PORT:-58443}:443"
    networks:
      - zakpos-frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

# =============================================================================
# VOLUMES CONFIGURATION
# =============================================================================
volumes:
  # Database volumes
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  
  # Message queue volumes
  zookeeper_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/zookeeper/data
  
  zookeeper_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/zookeeper/logs
  
  kafka_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/kafka
  
  # Application volumes
  api_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/uploads
  
  api_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/logs/api
  
  web_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/logs/web

  # OCR volumes
  ocr_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/logs/ocr

  ocr_temp:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/temp/ocr


  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/logs/nginx

# =============================================================================
# NETWORKS CONFIGURATION
# =============================================================================
networks:
  zakpos-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.24.0.0/24
          gateway: 172.24.0.1
    driver_opts:
      com.docker.network.bridge.name: zakpos-frontend
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: 1500
  
  zakpos-backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/24
          gateway: 172.25.0.1
    driver_opts:
      com.docker.network.bridge.name: zakpos-backend
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: 1500

# =============================================================================
# DOCKER COMPOSE COMMANDS
# =============================================================================
#
# Start all services:
# docker-compose up -d
#
# Start specific services:
# docker-compose up -d postgres redis api
# docker-compose up -d postgres redis kafka ocr
#
# View logs:
# docker-compose logs -f api
# docker-compose logs -f ocr
#
# Scale services:
# docker-compose up -d --scale api=3
#
# Stop all services:
# docker-compose down
#
# Stop and remove volumes:
# docker-compose down -v
#
# Rebuild and start:
# docker-compose up -d --build
#
# Check service status:
# docker-compose ps
#
# Execute commands in containers:
# docker-compose exec api npm run migration:run
# docker-compose exec postgres psql -U postgres -d pocket_pos_dev
# docker-compose exec ocr python3 -c "from app.services.ocr_service import OCRService; print('OCR Ready')"
# docker-compose exec ocr curl http://localhost:8000/api/v1/health
#
# =============================================================================

# =============================================================================
# ENVIRONMENT VARIABLES
# =============================================================================
#
# Copy .env.example to .env and customize:
# cp .env.example .env
#
# Required environment variables:
# - POSTGRES_PASSWORD
# - REDIS_PASSWORD
# - JWT_SECRET
# - SMTP_USER
# - SMTP_PASS
#
# Optional environment variables:
# - NODE_ENV (development|production)
# - API_PORT (default: 3000)
# - WEB_PORT (default: 3001)
# - OCR_PORT (default: 8000)
# - POSTGRES_PORT (default: 5432)
# - REDIS_PORT (default: 6379)
# - KAFKA_PORT (default: 9092)
#
# OCR-specific environment variables:
# - OCR_MODEL_PRIMARY (default: microsoft/trocr-small-printed)
# - OCR_MODEL_FALLBACK (default: tesseract)
# - OCR_ENABLE_GPU (default: false)
# - OCR_CONFIDENCE_THRESHOLD (default: 0.8)
# - MAX_IMAGE_SIZE_MB (default: 10)
#
# =============================================================================

# =============================================================================
# MONITORING AND OBSERVABILITY
# =============================================================================
#
# Health checks are configured for all services
# Logs are centralized in ./data/logs/
# Metrics can be collected via:
# - Prometheus (add prometheus service)
# - Grafana (add grafana service)
# - ELK Stack (add elasticsearch, logstash, kibana)
#
# =============================================================================

# =============================================================================
# SECURITY CONSIDERATIONS
# =============================================================================
#
# 1. Change default passwords in production
# 2. Use secrets management (Docker Swarm secrets)
# 3. Enable TLS/SSL for all services
# 4. Configure firewall rules
# 5. Regular security updates
# 6. Network segmentation
# 7. Resource limits and quotas
# 8. Backup and disaster recovery
# 9. Monitoring and alerting
# 10. Compliance requirements (GDPR, PCI-DSS)
#
# =============================================================================