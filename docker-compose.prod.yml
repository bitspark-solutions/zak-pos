# =============================================================================
# POCKET POS - Production Environment Docker Compose Configuration
# =============================================================================
# Production-optimized configuration for docker-compose.yml
# Focused on security, performance, scalability, and reliability

# =============================================================================
# PRODUCTION SERVICES CONFIGURATION
# =============================================================================
services:

  # ---------------------------------------------------------------------------
  # DATABASE SERVICES - PRODUCTION CONFIGURATION
  # ---------------------------------------------------------------------------
  
  postgres:
    image: postgres:17.6-alpine3.21
    container_name: zakpos-postgres-prod
    restart: always
    ports:
      - "47821:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-zakpos}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./docker/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - postgres_prod_backups:/backups
    command: [
      "postgres",
      "-c", "config_file=/etc/postgresql/postgresql.conf",
      "-c", "hba_file=/etc/postgresql/pg_hba.conf",
      "-c", "shared_preload_libraries=pg_stat_statements",
      "-c", "log_statement=ddl",
      "-c", "log_min_duration_statement=1000",
      "-c", "log_checkpoints=on",
      "-c", "log_connections=on",
      "-c", "log_disconnections=on",
      "-c", "log_lock_waits=on"
    ]
    networks:
      - zakpos-backend
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-pocket_pos}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  redis:
    image: redis:7.4.4-alpine3.21
    container_name: zakpos-redis-prod
    restart: always
    ports:
      - "58392:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf:ro
    command: [
      "redis-server", 
      "/etc/redis/redis.conf", 
      "--requirepass", "${REDIS_PASSWORD}",
      "--appendonly", "yes",
      "--appendfsync", "everysec",
      "--save", "900", "1",
      "--save", "300", "10",
      "--save", "60", "10000"
    ]
    networks:
      - zakpos-backend
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # ---------------------------------------------------------------------------
  # MESSAGE QUEUE SERVICES - PRODUCTION CONFIGURATION
  # ---------------------------------------------------------------------------

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zakpos-zookeeper-prod
    restart: always
    ports:
      - "55374:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 10
      ZOOKEEPER_SYNC_LIMIT: 5
      ZOOKEEPER_MAX_CLIENT_CNXNS: 100
      ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT: 10
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: 24
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "mntr,conf,ruok"
      ZOOKEEPER_JVM_OPTS: "-Xmx512m -Xms512m"
    volumes:
      - zookeeper_prod_data:/var/lib/zookeeper/data
      - zookeeper_prod_logs:/var/lib/zookeeper/log
    networks:
      - zakpos-backend
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181 | grep imok"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: zakpos-kafka-prod
    restart: always
    ports:
      - "54629:9092"
      - "56485:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://${KAFKA_EXTERNAL_HOST:-localhost}:54629
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:54629
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 3000
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_DELETE_TOPIC_ENABLE: 'false'
      # Production: Longer retention for data durability
      KAFKA_LOG_RETENTION_HOURS: 168  # 7 days
      KAFKA_LOG_RETENTION_BYTES: 1073741824  # 1GB
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      # Production: Performance tuning
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 8
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      KAFKA_NUM_REPLICA_FETCHERS: 4
      KAFKA_REPLICA_FETCH_MAX_BYTES: 1048576
      KAFKA_FETCH_PURGATORY_PURGE_INTERVAL_REQUESTS: 1000
      KAFKA_PRODUCER_PURGATORY_PURGE_INTERVAL_REQUESTS: 1000
      KAFKA_JVM_OPTS: "-Xmx1g -Xms1g"
      # Fix for broker registration issues
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - kafka_prod_data:/var/lib/kafka/data
    networks:
      - zakpos-backend
    depends_on:
      zookeeper:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:29092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    security_opt:
      - no-new-privileges:true

  # ---------------------------------------------------------------------------
  # APPLICATION SERVICES - PRODUCTION CONFIGURATION
  # ---------------------------------------------------------------------------

  api:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: production  # Use production stage
      args:
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
        VERSION: ${VERSION}
    image: zakpos/api:${VERSION:-latest}
    restart: always
    ports:
      - "39847:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      API_PREFIX: ${API_PREFIX:-api/v1}
      CORS_ORIGIN: ${CORS_ORIGIN}
      RATE_LIMIT_TTL: ${RATE_LIMIT_TTL:-60}
      RATE_LIMIT_LIMIT: ${RATE_LIMIT_LIMIT:-100}
      FILE_UPLOAD_DEST: /app/uploads
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}  # 10MB
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_SECURE: ${SMTP_SECURE:-false}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      # Production: Security headers
      HELMET_ENABLED: 'true'
      COMPRESSION_ENABLED: 'true'
      # Production: Monitoring
      PROMETHEUS_ENABLED: 'true'
      PROMETHEUS_PORT: 9090
      HEALTH_CHECK_ENABLED: 'true'
      # Production: Performance
      CLUSTER_MODE: 'true'
      MAX_WORKERS: ${MAX_WORKERS:-4}
    volumes:
      - api_prod_uploads:/app/uploads
      - api_prod_logs:/app/logs
    networks:
      - zakpos-frontend
      - zakpos-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        order: start-first
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/.npm
    user: "node"

  web:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production  # Use production stage
      args:
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
        VERSION: ${VERSION}
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
        NEXT_PUBLIC_APP_ENV: production
        NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN}
        NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${NEXT_PUBLIC_GOOGLE_ANALYTICS_ID}
    image: zakpos/web:${VERSION:-latest}
    restart: always
    ports:
      - "41923:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      NEXT_TELEMETRY_DISABLED: 1
      # Production: Security
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
      NEXT_PUBLIC_APP_ENV: production
      # Production: Monitoring
      NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN}
      NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${NEXT_PUBLIC_GOOGLE_ANALYTICS_ID}
    volumes:
      - web_prod_logs:/app/logs
    networks:
      - zakpos-frontend
    depends_on:
      - api
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        order: start-first
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/.next/cache
    user: "nextjs"

  # ---------------------------------------------------------------------------
  # REVERSE PROXY & LOAD BALANCER - PRODUCTION
  # ---------------------------------------------------------------------------

  nginx:
    image: nginx:1.27-alpine3.21
    container_name: zakpos-nginx-prod
    restart: always
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_prod_logs:/var/log/nginx
      - nginx_prod_cache:/var/cache/nginx
    ports:
      - "58071:80"
      - "58443:443"
    networks:
      - zakpos-frontend
    depends_on:
      - api
      - web
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run

  # ---------------------------------------------------------------------------
  # MONITORING & OBSERVABILITY - PRODUCTION
  # ---------------------------------------------------------------------------

  prometheus:
    image: prom/prometheus:latest
    container_name: zakpos-prometheus-prod
    restart: always
    ports:
      - "52764:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_prod_data:/prometheus
    networks:
      - zakpos-monitoring
      - zakpos-backend
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true

  grafana:
    image: grafana/grafana:latest
    container_name: zakpos-grafana-prod
    restart: always
    ports:
      - "58851:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_SECURITY_DISABLE_GRAVATAR: 'true'
      GF_ANALYTICS_REPORTING_ENABLED: 'false'
      GF_ANALYTICS_CHECK_FOR_UPDATES: 'false'
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - zakpos-monitoring
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true

  # ---------------------------------------------------------------------------
  # BACKUP & MAINTENANCE - PRODUCTION
  # ---------------------------------------------------------------------------

  backup:
    image: postgres:17.6-alpine3.21
    container_name: zakpos-backup-prod
    restart: "no"
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB:-zakpos}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
    volumes:
      - postgres_prod_backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - zakpos-backend
    depends_on:
      postgres:
        condition: service_healthy
    command: ["/backup.sh"]
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true

# =============================================================================
# PRODUCTION NETWORKS
# =============================================================================
networks:
  zakpos-frontend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: zakpos-frontend
    ipam:
      config:
        - subnet: 172.20.0.0/24
  
  zakpos-backend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: zakpos-backend
    ipam:
      config:
        - subnet: 172.21.0.0/24
  
  zakpos-monitoring:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: zakpos-monitoring
    ipam:
      config:
        - subnet: 172.22.0.0/24

# =============================================================================
# PRODUCTION VOLUMES
# =============================================================================
volumes:
  # Database volumes
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/zakpos}/data/postgres
  
  postgres_prod_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_PATH:-/opt/zakpos}/backups/postgres
  
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/zakpos}/data/redis
  
  # Message queue volumes
  zookeeper_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/zakpos}/data/zookeeper/data
  
  zookeeper_prod_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/zakpos}/data/zookeeper/logs
  
  kafka_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/zakpos}/data/kafka
  
  # Application volumes
  api_prod_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/zakpos}/data/uploads
  
  api_prod_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-/opt/zakpos}/logs/api
  
  web_prod_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-/opt/zakpos}/logs/web
  
  # Nginx volumes
  nginx_prod_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-/opt/zakpos}/logs/nginx
  
  nginx_prod_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/zakpos}/cache/nginx
  
  # Monitoring volumes
  prometheus_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/zakpos}/data/prometheus
  
  grafana_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/zakpos}/data/grafana

# =============================================================================
# PRODUCTION DEPLOYMENT COMMANDS
# =============================================================================
#
# Deploy to production:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
#
# Deploy with build:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build
#
# Scale services:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --scale api=3 --scale web=2
#
# Update services (rolling update):
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --no-deps api
#
# View production logs:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml logs -f --tail=100
#
# Backup database:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml run --rm backup
#
# Stop production environment:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml down
#
# =============================================================================

# =============================================================================
# PRODUCTION ENVIRONMENT VARIABLES
# =============================================================================
#
# Required environment variables for production:
#
# Database:
# - POSTGRES_DB=zakpos
# - POSTGRES_USER=postgres
# - POSTGRES_PASSWORD=<strong-password>
# - DATABASE_URL=postgresql://postgres:<password>@postgres:5432/zakpos
#
# Redis:
# - REDIS_PASSWORD=<strong-password>
# - REDIS_URL=redis://:<password>@redis:6379
#
# Application:
# - JWT_SECRET=<strong-jwt-secret>
# - JWT_EXPIRES_IN=24h
# - BCRYPT_ROUNDS=12
# - CORS_ORIGIN=https://yourdomain.com
# - API_PREFIX=api/v1
#
# Email:
# - SMTP_HOST=smtp.yourdomain.com
# - SMTP_PORT=587
# - SMTP_USER=noreply@yourdomain.com
# - SMTP_PASS=<smtp-password>
# - SMTP_SECURE=false
#
# Monitoring:
# - GRAFANA_ADMIN_PASSWORD=<strong-password>
#
# URLs:
# - NEXT_PUBLIC_API_URL=https://api.yourdomain.com
# - NEXT_PUBLIC_WS_URL=wss://api.yourdomain.com
#
# Paths:
# - DATA_PATH=/opt/zakpos
# - LOGS_PATH=/opt/zakpos
# - BACKUP_PATH=/opt/zakpos
#
# Build:
# - BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
# - VCS_REF=$(git rev-parse --short HEAD)
# - VERSION=$(git describe --tags --always)
#
# =============================================================================

# =============================================================================
# PRODUCTION SECURITY CHECKLIST
# =============================================================================
#
# 1. Environment Variables:
#    ✓ All secrets stored in .env file (not in version control)
#    ✓ Strong passwords for all services
#    ✓ JWT secret is cryptographically secure
#    ✓ CORS origins restricted to production domains
#
# 2. Network Security:
#    ✓ Services isolated in separate networks
#    ✓ Database not exposed to public network
#    ✓ Only necessary ports exposed
#    ✓ SSL/TLS certificates configured
#
# 3. Container Security:
#    ✓ Non-root users for all containers
#    ✓ Read-only filesystems where possible
#    ✓ No new privileges flag set
#    ✓ Security options configured
#
# 4. Data Security:
#    ✓ Database authentication enabled
#    ✓ Redis password protection
#    ✓ File uploads restricted and validated
#    ✓ Regular backups configured
#
# 5. Monitoring:
#    ✓ Health checks for all services
#    ✓ Prometheus metrics collection
#    ✓ Grafana dashboards configured
#    ✓ Log aggregation and rotation
#
# 6. Performance:
#    ✓ Resource limits set for all services
#    ✓ Horizontal scaling configured
#    ✓ Caching strategies implemented
#    ✓ Database connection pooling
#
# =============================================================================

# =============================================================================
# PRODUCTION MAINTENANCE
# =============================================================================
#
# Daily:
# - Monitor service health and resource usage
# - Check application logs for errors
# - Verify backup completion
#
# Weekly:
# - Review security logs
# - Update container images (if needed)
# - Performance analysis
#
# Monthly:
# - Security patches and updates
# - Database maintenance (VACUUM, REINDEX)
# - Log rotation and cleanup
# - Backup verification and testing
#
# Quarterly:
# - Security audit
# - Performance optimization
# - Disaster recovery testing
# - Documentation updates
#
# =============================================================================